import { Rhum } from "../testing_deps.ts";
import identity from "./utils/identity.ts";

import countBy from "./collection/countBy.ts";
import count from "./collection/count.ts";
import flatMapDeep from "./collection/flatMapDeep.ts";

Rhum.testPlan("collection", () => {
  Rhum.testSuite("countBy()()", () => {
    Rhum.testCase(
      "Should create an object composed of keys generated by running each element of collection through the iteratee",
      () => {
        Rhum.asserts.assertEquals(countBy(Math.floor)([6.1, 4.2, 6.3]), {
          "4": 1,
          "6": 2,
        });
        Rhum.asserts.assertEquals(
          countBy((elem: string) => elem.length)(["one", "two", "three"]),
          { "3": 2, "5": 1 }
        );
        Rhum.asserts.assertEquals(
          countBy(identity)(["foo", "bar", "foo", "bar", "foo", "baz"]),
          { bar: 2, baz: 1, foo: 3 }
        );
      }
    );
  });
  Rhum.testSuite("count()", () => {
    Rhum.testCase(
      "Should create an object counting the occurance of each element of collection",
      () => {
        Rhum.asserts.assertEquals(
          count(["foo", "bar", "foo", "bar", "foo", "baz"]),
          { bar: 2, baz: 1, foo: 3 }
        );
      }
    );
  });
  Rhum.testSuite("flatMapDeep()()", () => {
    Rhum.testCase("should created a deeply flattened flatmap", () => {
      Rhum.asserts.assertEquals(
        flatMapDeep((x: number) => [[x * 2]])([1, 2, 3, 4]),
        [2, 4, 6, 8]
      );
    });
  });
});

Rhum.run();
